apiVersion: v1
kind: ConfigMap
metadata:
  name: atlan-connectors-NAME
  labels:
    orchestration.atlan.com/version: "1"
    orchestration.atlan.com/source: "NAME"
data:
  icon: "https://atlan-public.s3.eu-west-1.amazonaws.com/atlan/logos/NAME.png"
  helpdeskLink: "https://docs.atlan.com/integrations/relational-database/NAME"
  logo: "https://atlan-public.s3.eu-west-1.amazonaws.com/atlan/logos/NAME.png"
  connector: "NAME"
  defaultConnectorType: "jdbc"
  jdbcCredentialTemplate: |
    {
      "className": "com.facebook.NAME.jdbc.NAMEDriver",
      "jarLink": "https://atlan-public.s3-eu-west-1.amazonaws.com/atlan/jdbc/NAME.tar.gz",
      "url": "jdbc:NAME://{{ host }}:{{ port|int }}",
      "driverProperties": { "user": "{{ username }}", "password": "{{ password }}" }
    }
  restCredentialTemplate: "{}"
  odbcCredentialTemplate: "{}"
  grpcCredentialTemplate: "{}"
  restMetadataTemplate: ""
  restMetadataOutputTransformerTemplate: ""
  sageTemplate: |
    {
      "catalogsCheck": {
          "curls": [
            {
              "name": "schemas",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw '{\"query\": \"show atlan schemas\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
          ],
        "responseTemplate": "{{- $includeFilter := dict}} {{- if eq `string` (printf `%T` (index .formData `include-filter`)) }} {{- $includeFilter = index .formData `include-filter` | fromJson}} {{- else }} {{- $includeFilter = index .formData `include-filter` }} {{- end }} {{- $allowedDatabases := list}} {{- $allowedSchemas := list}} {{- $missingObjectName := ``}} {{- $checkSuccess := true }} {{- range $schemaList :=  .schemas.results }} {{- $allowedDatabases = append $allowedDatabases $schemaList.TABLE_CATALOG }} {{- $allowedSchemas = append $allowedSchemas (print $schemaList.TABLE_CATALOG `.` $schemaList.TABLE_SCHEM )}} {{- end }} {{- range $filteredDb, $filteredSchemas := $includeFilter }} {{- $_db := lower $filteredDb | trimPrefix `^` | trimSuffix `$` }} {{- $checkSuccess = and $checkSuccess (has $_db $allowedDatabases) }} {{- if not (has $_db $allowedDatabases)}} {{- $missingObjectName = (print $_db ` ` `database`)}} {{- end }} {{- range $schmea := $filteredSchemas }} {{- $_schema := lower $schmea | trimPrefix `^` | trimSuffix `$` }}  {{- $checkSuccess = and $checkSuccess (has (print $_db `.` (lower $_schema)) $allowedSchemas)}} {{- if not (has (print $_db `.` (lower $_schema)) $allowedSchemas)}} {{- $missingObjectName = (print $_db `.` (lower $_schema) ` ` `schema`)}} {{- end }} {{- end }} {{- end }} {{- $response := dict `successMessage` `` `failureMessage` `` `data` .schemas.results `response` dict }} {{- if $checkSuccess }} {{- $_ := set $response `successMessage` `Check successful` }} {{- else }} {{- $_ := set $response `failureMessage` (print `Check failed for ` $missingObjectName) }} {{- end }} {{- $response | toJson }}"
      }
    }
  config: |
    {
      "properties": {
        "name": {
          "type": "string",
          "required": false,
          "ui": {
            "label": "Name",
            "hidden": true,
            "placeholder": "Host Name"
          }
        },
        "connector": {
          "type": "string",
          "required": false,
          "ui": {
            "label": "Connector",
            "hidden": true,
            "placeholder": "Connector"
          }
        },
        "connectorType": {
          "type": "string",
          "required": false,
          "ui": {
            "key": "_host",
            "label": "connectorType",
            "placeholder": "connectorType",
            "hidden": true
          }
        },
        "host": {
          "type": "string",
          "required": true,
          "default": "",
          "ui": {
            "label": "Host",
            "feedback": true,
            "help": "Your NAME instance host name",
            "BYOCdisabled": true,
            "rules": [
              {
                "required": true,
                "message": "Please enter a valid host name"
              }
            ],
            "grid": 6
          }
        },
        "port": {
          "type": "number",
          "default": 8080,
          "required": true,
          "ui": {
            "label": "Port",
            "placeholder": "Port",
            "disabled": false,
            "help": "Your NAME instance port number",
            "grid": 2,
            "BYOCdisabled": true,
            "rules": [
              {
                "required": true,
                "message": "Please enter a valid port number"
              }
            ]
          }
        },
        "auth-type": {
          "type": "string",
          "enum": ["basic"],
          "default": "basic",
          "required": true,
          "enumNames": ["Basic"],
          "ui": {
            "widget": "radio",
            "hidden": false,
            "label": "Authentication",
            "placeholder": "Credential Type",
            "rules": [
              {
                "required": true,
                "message": "Please enter a valid authentication type"
              }
            ]
          }
        },
        "basic": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "required": true,
              "ui": {
                "label": "Username",
                "placeholder": "Username",
                "help": "Database Username",
                "feedback": true,
                "message": "Please enter a valid username",
                "grid": 4,
                "rules": [
                  {
                    "required": true,
                    "message": "Please enter a valid username"
                  }
                ]
              }
            },
            "password": {
              "type": "string",
              "required": false,
              "ui": {
                "widget": "password",
                "label": "Password",
                "help": "Database Password",
                "feedback": false,
                "placeholder": "Password",
                "grid": 4
              }
            }
          },
          "ui": {
            "widget": "nested",
            "label": "Basic Authentication",
            "placeholder": "Credential Type",
            "nestedValue": false,
            "hidden": true
          }
        }
      },
      "anyOf": [
        {
          "properties": {
            "auth-type": {
              "const": "basic"
            }
          },
          "required": ["basic"]
        }
      ]
    }
