# Workflow Templates
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: atlan-NAME
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          # Credential
          - name: credentials-fetch-strategy
            value: "credential_guid"
            enum:
              - "credential_guid"
              - "k8s_secret"
          - name: credential-guid
            value: ""
          # Connection Entity
          - name: connection
          - name: atlas-auth-type
            value: "internal"
            enum:
              - "internal"
              - "apikey"
          # Include/Exclude Filters
          - name: include-filter
            value: "{}"
          - name: exclude-filter
            value: "{}"
          # Publish Mode
          - name: publish-mode
            value: "production"
            enum:
              - "production"
              - "dev"
              - "test"
          # Revisions
          - name: marketplace-scripts-revision
            valueFrom:
              configMapKeyRef:
                name: atlan-runtime-packages-config
                key: "marketplaceScriptsBranch"
                optional: true
              default: "master"
          - name: marketplace-packages-revision
            valueFrom:
              configMapKeyRef:
                name: atlan-runtime-packages-config
                key: "marketplacePackagesBranch"
                optional: true
              default: "master"
      dag:
        tasks:
          # Extract metadata from NAME
          - name: extract
            template: extract-NAME-metadata
            arguments:
              parameters:
                - name: credentials-fetch-strategy
                  value: "{{inputs.parameters.credentials-fetch-strategy}}"
                - name: credential-guid
                  value: "{{inputs.parameters.credential-guid}}"
                - name: connection-qualified-name
                  value: "{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}"
                - name: include-filter
                  value: "{{inputs.parameters.include-filter}}"
                - name: exclude-filter
                  value: "{{inputs.parameters.exclude-filter}}"
                - name: git-kube-secret-name
                  value: "git-ssh"
                - name: git-kube-ssh-key
                  value: "private-key"
                - name: heracles-uri
                  value: "http://heracles-service.heracles.svc.cluster.local"
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},connector=NAME,package=atlan-NAME,connection={{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}},template={{workflow.labels.workflows.argoproj.io/workflow-template}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
          # Process the extracted metadata
          - name: process
            template: process-NAME-metadata
            depends: "extract.Succeeded"
            arguments:
              parameters:
                - name: connection-qualified-name
                  value: "{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}"
                - name: git-kube-secret-name
                  value: "git-ssh"
                - name: git-kube-ssh-key
                  value: "private-key"
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},connector=NAME,package=atlan-NAME,connection={{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}},template={{workflow.labels.workflows.argoproj.io/workflow-template}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"

          - name: publish
            depends: "process.Succeeded"
            template: publish-NAME-metadata
            arguments:
              parameters:
                - name: connection
                  value: "{{inputs.parameters.connection}}"
                - name: mode
                  value: "{{inputs.parameters.publish-mode}}"
                - name: source
                  value: "NAME"
                - name: atlas-auth-type
                  value: "{{inputs.parameters.atlas-auth-type}}"
                - name: include-filter
                  value: "{{inputs.parameters.include-filter}}"
                - name: exclude-filter
                  value: "{{inputs.parameters.exclude-filter}}"
                - name: atlan-web-kube-secret
                  value: "argo-client-creds"
                - name: heracles-uri
                  value: "http://heracles-service.heracles.svc.cluster.local"
                - name: atlas-api-uri
                  value: "http://atlas-service-atlas.atlas.svc.cluster.local/api/atlas/v2"
                - name: publish-chunk-size
                  value: "100"
                - name: git-kube-secret-name
                  value: "git-ssh"
                - name: git-kube-ssh-key
                  value: "private-key"
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},connector=NAME,package=atlan-NAME,connection={{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}},template={{workflow.labels.workflows.argoproj.io/workflow-template}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
                - name: marketplace-packages-revision
                  value: "{{inputs.parameters.marketplace-packages-revision}}"
      
    - name: extract-NAME-metadata
      inputs:
        parameters:
          - name: credentials-fetch-strategy
          - name: credential-guid
          - name: connection-qualified-name
          - name: include-filter
          - name: exclude-filter
          - name: git-kube-secret-name
          - name: git-kube-ssh-key
          - name: heracles-uri
          - name: statsd-host
          - name: statsd-port
          - name: statsd-global-tags
          - name: marketplace-scripts-revision
      outputs:
        parameters:
          - name: auth-type-and-host
            valueFrom:
              parameter: "{{tasks.auth-type-and-host-to-param.outputs.parameters.output}}"
      dag:
        tasks:
          # Fetch the credential
          - name: fetch-credentials
            when: "{{inputs.parameters.credentials-fetch-strategy}} == credential_guid"
            templateRef:
              name: rest-api
              template: oauth2-client-credentials
            arguments:
              parameters:
                - name: method
                  value: GET
                - name: url
                  value: "{{inputs.parameters.heracles-uri}}/credentials/{{inputs.parameters.credential-guid}}/use"
                - name: request-config
                  value: |
                    {
                      "headers": {
                        "user-id": "{{workflow.labels.workflows.argoproj.io/creator}}"
                      }
                    }
                - name: kube-secret-name
                  value: "argo-client-creds"
                - name: max-retries
                  value: "10"
                - name: client-id-env 
                  value: "login"
                - name: client-secret-env
                  value: "password"
                - name: token-url-env
                  value: "host"
                - name: execution-script
                  value: |
                    if state == ExecutionState.API_FAIL and (response.status_code >= 500 or response.status_code in {400}):
                      LOGGER.debug("Heracles is unavailable. Performing retry with back-off")
                      failure_handler = FailureHandler.RETRY 

                    if state == ExecutionState.OUTPUT_PROCESS:
                      credential = json.loads(output)
                      output = { 
                        "authType": credential["authType"],
                        "host": credential["host"]
                      } 

                    if state == ExecutionState.API_POST: 
                      stop=True
                - name: statsd-host
                  value: "{{inputs.parameters.statsd-host}}"
                - name: statsd-port
                  value: "{{inputs.parameters.statsd-port}}"
                - name: statsd-global-tags
                  value: "{{inputs.parameters.statsd-global-tags}}"
          # Convert that `fetch-credentials` output from an artifact to a parameter
          - name: auth-type-and-host-to-param
            dependencies:
              - fetch-credentials
            templateRef:
              name: utils
              template: artifact-to-direct-param
            arguments:
              artifacts:
                - name: input
                  from: "{{tasks.fetch-credentials.outputs.artifacts.success}}"
                  subPath: "result-0.json"
          # Get all the workbooks
          - name: fetch-ASSET_NAME
            dependencies:
              - auth-type-and-host-to-param
            template: api-request
            arguments:
              parameters:
                - name: auth-type
                  value: "{{=jsonpath(tasks['auth-type-and-host-to-param'].outputs.parameters.output, '$.authType')}}"
                - name: credential-guid
                  value: "{{inputs.parameters.credential-guid}}"
                - name: heracles-uri
                  value: "{{inputs.parameters.heracles-uri}}"
                - name: method
                  value: GET
                - name: url
                  value: "<>"
                - name: request-config
                  value: |
                    {
                      "params": {
                        "page": 0,
                        "limit": 100
                      }
                    }
                - name: kube-secret-name
                  value: "argo-client-creds"
                - name: output-prefix
                  value: "argo-artifacts/{{inputs.parameters.connection-qualified-name}}/extracted-metadata/{{workflow.name}}/ASSET_NAME"
                - name: output-chunk-size
                  value: "1000"
                - name: execution-script
                  value: |
                    if state == ExecutionState.RAW_INPUT_PROCESS:
                      creds_arr = secrets["result-0.json"].split("""\n""")
                      host = ""
                      for cred in creds_arr:
                        if "HOST" in cred:
                          host = cred.split('=')[-1].replace('"', '')
                      
                      url = "{{inputs.parameters.url}}"
                      url = url.replace("<HOST>", host)
                      LOGGER.debug(f"URL: {url}")
                      request_config["url"] = url

                    if state == ExecutionState.OUTPUT_PROCESS:
                      output = json.loads(output)
                    
                    if state == ExecutionState.API_POST:
                      workbook_response = response.json()
                      if not workbook_response.get("hasMore"):
                        stop = True
                      else:
                        next_page = workbook_response.get("nextPage")
                        request_config["params"] = {
                          "page": next_page,
                          "limit": 100
                        }
                    if state == ExecutionState.API_FAIL:
                      if response.status_code == 500:
                        failure_handler = FailureHandler.NONE
                      else:
                        failure_handler = FailureHandler.RETRY
                - name: statsd-host
                  value: "{{inputs.parameters.statsd-host}}"
                - name: statsd-port
                  value: "{{inputs.parameters.statsd-port}}"
                - name: statsd-global-tags
                  value: "{{inputs.parameters.statsd-global-tags}}"

    - name: process-NAME-metadata
      inputs:
        parameters:
          - name: connection-qualified-name
          - name: git-kube-secret-name
          - name: git-kube-ssh-key
          - name: statsd-host
          - name: statsd-port
          - name: statsd-global-tags
          - name: marketplace-scripts-revision
      dag:
        tasks:
          - name: process-metadata
            template: process-metadata
            arguments:
              parameters:
                - name: output-prefix
                  value: "argo-artifacts/{{inputs.parameters.connection-qualified-name}}/processed-metadata/{{workflow.name}}"
                - name: git-kube-secret-name
                  value: "{{inputs.parameters.git-kube-secret-name}}"
                - name: git-kube-ssh-key
                  value: "{{inputs.parameters.git-kube-ssh-key}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
              artifacts:
                - name: extracted-metadata
                  s3:
                    key: "argo-artifacts/{{inputs.parameters.connection-qualified-name}}/extracted-metadata/{{workflow.name}}"
                - name: parsed-queries
                  s3:
                    key: "argo-artifacts/{{inputs.parameters.connection-qualified-name}}/parsed-queries/{{workflow.name}}"

    - name: publish-NAME-metadata
      inputs:
        parameters:
          - name: connection
          - name: mode
          - name: source
          - name: atlas-api-uri
          - name: heracles-uri
          - name: atlan-web-kube-secret
          - name: atlas-auth-type 
          - name: publish-chunk-size
          - name: git-kube-secret-name
          - name: git-kube-ssh-key
          - name: statsd-host
          - name: statsd-port
          - name: statsd-global-tags
          - name: marketplace-scripts-revision
          - name: marketplace-packages-revision
      dag:
        tasks:
          # Run atlan-crawler/publish-bi template
          - name: publish
            templateRef:
              name: atlan-crawler
              template: publish-bi
            arguments:
              artifacts:
                - name: data
                  s3:
                    key: "argo-artifacts/{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}/processed-metadata/{{workflow.name}}"
                - name: transformer-config
                  raw:
                    data: |
                      {
                        "external_map": {
                          "crawler_name": "{{workflow.labels.workflows.argoproj.io/workflow-template}}",
                          "tenant_id": "{{workflow.namespace}}",
                          "integration_name": "{{inputs.parameters.source}}",
                          "workflow_name": "{{workflow.name}}",
                          "connection_name": "{{=jsonpath(inputs.parameters.connection, '$.attributes.name')}}",
                          "connection_qn": "{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}"
                        },
                        "output_prefix": "/tmp/entities",
                        "templates_root": "/tmp/templates/packages",
                        "transformation_config": [
                          {
                            "input_file_pattern": "/tmp/inputs/<>.json",
                            "template": "atlan/NAME/transformers/<>.jinja2",
                            "output_file_prefix": "<>/<>",
                            "output_chunk_size": 15000
                          }
                        ]
                      }
              parameters:
                - name: connection
                  value: "{{inputs.parameters.connection}}"
                - name: mode
                  value: "{{inputs.parameters.mode}}"
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: raw-input-file-sort
                  value: ""
                - name: raw-input-folder-sort
                  value: ""
                - name: raw-input-file-pattern
                  value: "**/*.json"
                - name: publish-chunk-size
                  value: "{{inputs.parameters.publish-chunk-size}}"
                - name: atlas-auth-type
                  value: "{{inputs.parameters.atlas-auth-type}}"
                - name: hierarchy
                  value: |
                    [
                      [
                        {
                        "name":"",
                        "file_pattern": ""
                        }
                      ]
                    ]
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
                - name: marketplace-packages-revision
                  value: "{{inputs.parameters.marketplace-packages-revision}}"
                - name: statsd-global-tags
                  value: "{{inputs.parameters.statsd-global-tags}}"
    
    - name: NAME-api
      synchronization:
        semaphore:
          configMapKeyRef:
            name: atlan-NAME
            key: api
      volumes:
        - name: credentials
          emptyDir: { }
      inputs:
        artifacts:
          - name: raw-input
            path: /tmp/input
            optional: true
          - name: raw-input-file
            path: "/tmp/input/input.json"
            optional: true
        parameters:
          - name: credential-guid
          - name: page-size
            value: "10"
          - name: method
            value: "GET"
          - name: url
          - name: request-config
            value: "{}"
          - name: execution-script
          - name: output-chunk-size
            value: 100
          - name: kube-secret-name
            value: "argo-client-creds"
          - name: client-id-env
            value: "login"
          - name: client-secret-env
            value: "password"
          - name: token-url-env
            value: "host"
          - name: raw-input-paginate
            value: 0
          - name: raw-input-file-pattern
            value: ""
          - name: raw-input-multiline
            value: "False"
          - name: statsd-host
            value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
          - name: statsd-port
            value: "9125"
          - name: statsd-global-tags
            value: "workflow={{workflow.name}},bot=atlan-NAME"
          - name: output-prefix
            value: "argo-artifacts/{{workflow.namespace}}/{{workflow.name}}/{{pod.name}}"
          - name: heracles-uri
            value: "http://heracles-service.heracles.svc.cluster.local"
          - name: init-execution-script
            value: |
              if state == ExecutionState.API_FAIL and (response.status_code >= 500 or response.status_code in {400}):
                LOGGER.debug('Heracles is unavailable. Performing retry with back-off')
                failure_handler = FailureHandler.RETRY
              
              if state == ExecutionState.OUTPUT_PROCESS:
                credential = json.loads(output)
                output = ""
                for key, value in credential.items():
                  output += f"""ATLAN_{key.upper()}="{str(value)}"\n"""

                output += f"""ATLAN_TOKEN_URL='https://{credential['host']}/v2/auth/token'\n"""

              if state == ExecutionState.API_POST:
                stop = True
      outputs:
        artifacts:
          - name: success
            path: "/tmp/rest/success"
            s3:
              key: "{{inputs.parameters.output-prefix}}"
            archive:
              none: { }
          - name: failure
            path: "/tmp/rest/failure"
        parameters:
          - name: success-num-files
            valueFrom:
              path: "/tmp/rest/success/result-gen.txt"
          - name: failure-num-files
            valueFrom:
              path: "/tmp/rest/failure/result-gen.txt"
      container:
        image: ghcr.io/atlanhq/rest-master:165b7e5
        command: [ "./entrypoint.sh" ]
        volumeMounts:
          - name: credentials
            mountPath: /tmp/credentials
        env:
          - name: OAUTHLIB_INSECURE_TRANSPORT
            value: "1"
        imagePullPolicy: IfNotPresent
        args: [
            "python3", "main.py", "{{inputs.parameters.method}}", "{{inputs.parameters.url}}",
            "--request-config", "{{inputs.parameters.request-config}}",
            "--raw-input-paginate", "{{inputs.parameters.raw-input-paginate}}",
            "--raw-input-file-pattern", "{{inputs.parameters.raw-input-file-pattern}}",
            "--raw-input-multiline", "{{inputs.parameters.raw-input-multiline}}",
            "--execution-script", "{{inputs.parameters.execution-script}}",
            "--secrets-path", "/tmp/credentials/success/*.json",
            "--auth-type", "oauth2",
            "--auth-oauth2-type", "client_credentials",
            "--auth-oauth2-impersonate-user", "",
            "--auth-oauth2-client-credentials-client-id", "ATLAN_USERNAME",
            "--auth-oauth2-client-credentials-secret", "ATLAN_PASSWORD",
            "--auth-oauth2-client-credentials-token-url", "ATLAN_TOKEN_URL",
            "--output-chunk-size", "{{inputs.parameters.output-chunk-size}}",
            "--output-file-prefix", "/tmp/rest",
            "--pagination-wait-time", "10",
            "--max-retries", "3",
            "--statsd-host", "{{inputs.parameters.statsd-host}}",
            "--statsd-port", "{{inputs.parameters.statsd-port}}",
            "--statsd-global-tags", "{{inputs.parameters.statsd-global-tags}}"
          ]
      initContainers:
        - name: fetch-credentials
          image: ghcr.io/atlanhq/rest-master:165b7e5
          command: [ "python3", "main.py" ]
          env:
            - name: OAUTHLIB_INSECURE_TRANSPORT
              value: "1"
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.client-id-env}}"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.client-secret-env}}"
            - name: TOKEN_URL
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.token-url-env}}"
          mirrorVolumeMounts: true
          args: [
            "GET",
            "{{inputs.parameters.heracles-uri}}/credentials/{{inputs.parameters.credential-guid}}/use",
            "--raw-input", "{}",
            "--raw-input-file-sort", "",
            "--raw-input-multiline", "False",
            "--execution-script", "{{inputs.parameters.init-execution-script}}",
            "--raw-input-paginate", "0",
            "--auth-type", "oauth2",
            "--auth-oauth2-type", "client_credentials",
            "--auth-oauth2-impersonate-user", "{{=sprig.dig('labels', 'workflows', 'argoproj', 'io/creator', '', workflow)}}",
            "--auth-oauth2-client-credentials-client-id", "CLIENT_ID",
            "--auth-oauth2-client-credentials-secret", "CLIENT_SECRET",
            "--auth-oauth2-client-credentials-token-url", "TOKEN_URL",
            "--output-chunk-size", "0",
            "--output-file-prefix", "/tmp/credentials",
            "--pagination-wait-time", "0",
            "--max-retries", "10",
            "--statsd-host", "{{inputs.parameters.statsd-host}}",
            "--statsd-port", "{{inputs.parameters.statsd-port}}",
            "--statsd-global-tags", "{{inputs.parameters.statsd-global-tags}}"
          ]