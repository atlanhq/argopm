apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: atlan-NAME
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: credentials-fetch-strategy
            value: "credential_guid"
            enum:
              - "k8s_secret"
              - "credential_guid"

          - name: credential-kube-secret-name
            value: "{{workflow.name}}-credential-secret"

          - name: credential-guid
            value: ""

          #connection atlan object
          - name: connection

          # NAME api version.
          - name: api-version
            value: "v52.0"

          #publish mode
          - name: publish-mode
            value: "production"
            enum:
              - "production"
              - "test"
              - "dev"

          #publish credential
          - name: atlas-auth-type
            value: "internal"
            enum:
              - "internal"
              - "apikey"

          - name: git-kube-secret-name
            value: "git-ssh"
          - name: git-kube-ssh-key
            value: "private-key"

          - name: auto-classification
            value: "false"
            enum:
              - "true"
              - "false"

          - name: attachment-confidence-threshold
            value: "0.8"

          - name: fetch-reports
            value: "true"

          # Revisions
          - name: marketplace-scripts-revision
            valueFrom:
              configMapKeyRef:
                name: atlan-runtime-packages-config
                key: "marketplaceScriptsBranch"
                optional: true
              default: "master"
          - name: marketplace-packages-revision
            valueFrom:
              configMapKeyRef:
                name: atlan-runtime-packages-config
                key: "marketplacePackagesBranch"
                optional: true
              default: "master"

      dag:
        tasks:
          - name: fetch-credentials
            templateRef:
              name: rest-api
              template: oauth2-client-credentials
            arguments:
              parameters:
                - name: method
                  value: GET
                - name: url
                  value: "http://heracles-service.heracles.svc.cluster.local/credentials/{{inputs.parameters.credential-guid}}/use"
                - name: request-config
                  value: |
                    {
                      "headers": {
                        "user-id": "{{workflow.labels.workflows.argoproj.io/creator}}"
                      }
                    }
                - name: kube-secret-name
                  value: "argo-client-creds"
                - name: max-retries
                  value: "10"
                - name: client-id-env
                  value: "login"
                - name: client-secret-env
                  value: "password"
                - name: token-url-env
                  value: "host"
                - name: execution-script
                  value: |
                    if state == ExecutionState.API_FAIL and (response.status_code >= 500 or response.status_code in {400}):
                      LOGGER.debug('Heracles is unavailable. Performing retry with back-off')
                      failure_handler = FailureHandler.RETRY 
                    if state == ExecutionState.OUTPUT_PROCESS:  
                      credential = json.loads(output)
                      auth_type = credential["authType"]

                      if auth_type == "basic":
                        oauth2_type = "resource_owner_password"
                      elif auth_type == "jwt":
                        oauth2_type = "jwt_bearer"
                      
                      output = { 
                        "oauth2_type": oauth2_type,
                      } 
                    
                    if state == ExecutionState.API_POST: 
                      stop=True
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},bot=atlan-NAME"
          - name: auth-type-to-param
            dependencies:
              - fetch-credentials
            templateRef:
              name: utils
              template: artifact-to-key-param
            arguments:
              parameters:
                - name: key
                  value: "oauth2_type"
              artifacts:
                - name: input
                  from: "{{tasks.fetch-credentials.outputs.artifacts.success}}"
                  subPath: "result-0.json"
          - name: extract
            dependencies:
              - auth-type-to-param
            template: extract-NAME-metadata
            arguments:
              parameters:
                - name: credentials-fetch-strategy
                  value: "{{inputs.parameters.credentials-fetch-strategy}}"
                - name: credential-kube-secret-name
                  value: "{{inputs.parameters.credential-kube-secret-name}}"
                - name: credential-guid
                  value: "{{inputs.parameters.credential-guid}}"
                - name: oauth2-type
                  value: "{{tasks.auth-type-to-param.outputs.parameters.output}}"
                - name: connection-qualified-name
                  value: "{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}"
                - name: heracles-uri
                  value: "http://heracles-service.heracles.svc.cluster.local"
                - name: git-kube-secret-name
                  value: "git-ssh"
                - name: git-kube-ssh-key
                  value: "private-key"
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},connector=NAME,package=atlan-NAME,connection={{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}},template={{workflow.labels.workflows.argoproj.io/workflow-template}}"
                - name: fetch-reports
                  value: "{{inputs.parameters.fetch-reports}}"

          - name: process-objects
            template: process-NAME-described-assets
            dependencies:
              - extract
            withParam: "{{tasks.extract.outputs.parameters.org-host-name}}"
            arguments:
              parameters:
                - name: host-name
                  value: "{{item.host}}"
                - name: output-prefix
                  value: "argo-artifacts/{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}/metadata-extract/{{workflow.name}}/processed-metadata"
                - name: process-chunk-size
                  value: 10000
              artifacts:
                - name: input-raw-metadata
                  s3:
                    key: "argo-artifacts/{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}/metadata-extract/{{workflow.name}}/raw-metadata"
                  archive:
                    none: { }
                - name: scripts
                  git:
                    repo: git@github.com:atlanhq/marketplace-scripts
                    insecureIgnoreHostKey: true
                    depth: 1
                    revision: "{{inputs.parameters.marketplace-scripts-revision}}"
                    sshPrivateKeySecret:
                      name: "{{inputs.parameters.git-kube-secret-name}}"
                      key: "{{inputs.parameters.git-kube-ssh-key}}"
          - name: publish
            dependencies:
              - process-objects
            template: publish-NAME-metadata
            arguments:
              parameters:
                - name: connection
                  value: "{{inputs.parameters.connection}}"
                - name: mode
                  value: "{{inputs.parameters.publish-mode}}"
                - name: source
                  value: "NAME"
                - name: atlas-api-uri
                  value: "http://atlas-service-atlas.atlas.svc.cluster.local/api/atlas/v2"
                - name: atlas-auth-type
                  value: "{{inputs.parameters.atlas-auth-type}}"
                - name: heracles-uri
                  value: "http://heracles-service.heracles.svc.cluster.local"
                - name: processed-data-key
                  value: "argo-artifacts/{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}/metadata-extract/{{workflow.name}}/processed-metadata"
                - name: atlan-web-kube-secret
                  value: "argo-client-creds"
                - name: publish-chunk-size
                  value: "25"
                - name: git-kube-secret-name
                  value: "git-ssh"
                - name: git-kube-ssh-key
                  value: "private-key"
                - name: statsd-host
                  value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
                - name: statsd-port
                  value: "9125"
                - name: statsd-global-tags
                  value: "workflow={{workflow.name}},connector=NAME,package=atlan-NAME,connection={{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}},template={{workflow.labels.workflows.argoproj.io/workflow-template}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
                - name: marketplace-packages-revision
                  value: "{{inputs.parameters.marketplace-packages-revision}}"

    - name: extract-NAME-metadata
      inputs:
        parameters:
          - name: credentials-fetch-strategy
          - name: credential-kube-secret-name
          - name: credential-guid
          - name: oauth2-type
          - name: connection-qualified-name
          - name: heracles-uri
          - name: git-kube-secret-name
          - name: git-kube-ssh-key
          - name: statsd-host
          - name: statsd-port
          - name: statsd-global-tags
          - name: fetch-reports
      outputs:
        parameters:
          - name: org-host-name
            valueFrom:
              default: "[]"
              parameter: "{{tasks.convert-to-param.outputs.parameters.output}}"
      dag:
        tasks:
          - name: extract-organization
            template: NAME-api
            arguments:
              parameters:
                - name: url
                  value: "<HOST>/services/data/v52.0/query?q=select%20Fields(All)%20from%20Organization%20limit%201"
                - name: credential-guid
                  value: "{{inputs.parameters.credential-guid}}"
                - name: oauth2-type
                  value: "{{inputs.parameters.oauth2-type}}"
                - name: execution-script
                  value: |
                    if state == ExecutionState.RAW_INPUT_PROCESS:
                      creds_arr = secrets["result-0.json"].split("""\n""")
                      host = ''
                      for cred in creds_arr:
                        if 'HOST' in cred:
                          host = cred.split('=')[-1].replace('"', '')
                      request_config['url'] = request_config['url'].replace('<HOST>', host)
                      store['host'] = host

                    if state == ExecutionState.OUTPUT_PROCESS:
                      _response = json.loads(output).get('records', [])

                      if len(_response) > 0:
                        output = _response[0]
                        output['host'] = store['host']

                    if state == ExecutionState.API_POST:
                      stop = True

                    if state == ExecutionState.API_FAIL: failure_handler=FailureHandler.RETRY
                - name: output-chunk-size
                  value: 1
                - name: output-prefix
                  value: "argo-artifacts/{{inputs.parameters.connection-qualified-name}}/metadata-extract/{{workflow.name}}/raw-metadata/described-organization/0"

    - name: process-NAME-metadata
      inputs:
        parameters:
          - name: host-name
          - name: output-prefix
          - name: process-chunk-size
        artifacts:
          - name: input-raw-metadata
            path: "/tmp/input"
          - name: scripts
            path: /tmp/marketplace-scripts
      outputs:
        artifacts:
          - name: output
            path: "/tmp/output"
            s3:
              key: "{{inputs.parameters.output-prefix}}"
            archive:
              none: { }
      container:
        image: ghcr.io/atlanhq/marketplace-scripts-base:0.1.11
        workingDir: "/tmp/marketplace-scripts"
        command: [ "python" ]
        args:
          - "-m"
          - "marketplace_scripts.NAME.main"
          - "--host-name"
          - "{{inputs.parameters.host-name}}"
          - "--input-dir"
          - "/tmp/input"
          - "--output-prefix"
          - "/tmp/output/"
          - "--chunk-size"
          - "{{inputs.parameters.process-chunk-size}}"

    - name: publish-NAME-metadata
      inputs:
        parameters:
          - name: connection
          - name: mode
          - name: source
          - name: atlas-api-uri
          - name: heracles-uri
          - name: processed-data-key
          - name: atlan-web-kube-secret
          - name: atlas-auth-type
          - name: publish-chunk-size
          - name: git-kube-secret-name
          - name: git-kube-ssh-key
          - name: statsd-host
          - name: statsd-port
          - name: statsd-global-tags
          - name: marketplace-scripts-revision
          - name: marketplace-packages-revision
      dag:
        tasks:
          - name: publish
            templateRef:
              name: atlan-crawler
              template: generic-publish
            arguments:
              artifacts:
                - name: data
                  s3:
                    key: "{{inputs.parameters.processed-data-key}}"
                - name: transformer-config
                  raw:
                    data: |
                      {
                        "external_map": {
                          "crawler_name": "{{workflow.labels.workflows.argoproj.io/workflow-template}}",
                          "tenant_id": "{{workflow.namespace}}",
                          "integration_name": "{{inputs.parameters.source}}",
                          "workflow_name": "{{workflow.name}}",
                          "connection_name": "{{=jsonpath(inputs.parameters.connection, '$.attributes.name')}}",
                          "connection_qn": "{{=jsonpath(inputs.parameters.connection, '$.attributes.qualifiedName')}}"
                        },
                        "output_prefix": "/tmp/entities/",
                        "templates_root": "/tmp/templates/packages",
                        "transformation_config": [
                          {
                            "input_file_pattern": "/tmp/inputs/organization*.json",
                            "template": "atlan/NAME/transformers/organization.jinja2",
                            "output_file_prefix": "organization"
                          },
                          {
                            "input_file_pattern": "/tmp/inputs/objects*.json",
                            "template": "atlan/NAME/transformers/object.jinja2",
                            "output_file_prefix": "objects",
                            "ignore": true
                          },
                          {
                            "input_file_pattern": "/tmp/inputs/fields*.json",
                            "template": "atlan/NAME/transformers/field.jinja2",
                            "output_file_prefix": "fields",
                            "ignore": true
                          },
                          {
                            "input_file_pattern": "/tmp/inputs/reports*.json",
                            "template": "atlan/NAME/transformers/report.jinja2",
                            "output_file_prefix": "reports",
                            "ignore": true
                          },
                          {
                            "input_file_pattern": "/tmp/inputs/dashboards*.json",
                            "template": "atlan/NAME/transformers/dashboard.jinja2",
                            "output_file_prefix": "dashboards",
                            "ignore": true
                          }
                        ]
                      }
              parameters:
                - name: connection
                  value: "{{inputs.parameters.connection}}"
                - name: mode
                  value: "{{inputs.parameters.mode}}"
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: raw-input-file-sort
                  value: "organization,objects,fields,reports,dashboards"
                - name: publish-chunk-size
                  value: "{{inputs.parameters.publish-chunk-size}}"
                - name: atlas-auth-type
                  value: "{{inputs.parameters.atlas-auth-type}}"
                - name: statsd-global-tags
                  value: "{{inputs.parameters.statsd-global-tags}}"
                - name: marketplace-scripts-revision
                  value: "{{inputs.parameters.marketplace-scripts-revision}}"
                - name: marketplace-packages-revision
                  value: "{{inputs.parameters.marketplace-packages-revision}}"

    - name: NAME-api
      synchronization:
        semaphore:
          configMapKeyRef:
            name: atlan-NAME
            key: api
      volumes:
        - name: atlan-NAME-workflow-directory
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteOnce" ]
                resources:
                  requests:
                    storage: 60Gi
        - name: credentials
          emptyDir: { }
      inputs:
        artifacts:
          - name: raw-input
            path: /tmp/input
            optional: true
        parameters:
          - name: credential-guid
          - name: oauth2-type
          - name: page-size
            value: "10"
          - name: url
          - name: request-config
            value: |
              {
                "headers": {
                  "Content-Type": "application/x-www-form-urlencoded"
                }
              }
          - name: execution-script
          - name: output-chunk-size
            value: "0"sourceCategory
          - name: kube-secret-name
            value: "argo-client-creds"
          - name: client-id-env
            value: "login"
          - name: client-secret-env
            value: "password"
          - name: token-url-env
            value: "host"
          - name: raw-input-file-pattern
            value: ""
          - name: raw-input-paginate
            value: 0
          - name: raw-input-multiline
            value: "False"
          - name: statsd-host
            value: "prometheus-statsd-exporter.monitoring.svc.cluster.local"
          - name: statsd-port
            value: "9125"
          - name: statsd-global-tags
            value: "workflow={{workflow.name}},bot=atlan-NAME"
          - name: output-prefix
            value: "argo-artifacts/{{workflow.namespace}}/{{workflow.name}}/{{pod.name}}"
          - name: heracles-uri
            value: "http://heracles-service.heracles.svc.cluster.local"
          - name: init-execution-script
            value: |
              if state == ExecutionState.API_FAIL and (response.status_code >= 500 or response.status_code in {400}):
                LOGGER.debug('Heracles is unavailable. Performing retry with back-off')
                failure_handler = FailureHandler.RETRY
              if state == ExecutionState.OUTPUT_PROCESS:
                credential = json.loads(output)
                auth_type = credential.get('authType', '')
                extra_params = credential.get('extra', {})
                is_sandbox = extra_params.get('is_sandbox', False)
                token_url = 'test.NAME.com' if is_sandbox else 'login.NAME.com'

                output = f"""USERNAME="{credential.get('username', '')}"
                HOST="{credential.get('host', '')}"
                TOKEN_URL="https://{token_url}/services/oauth2/token"
                CLIENT_ID="{extra_params.get('client_id', '')}"
                """

                if auth_type == 'basic':
                  password = credential.get('password', '').replace('$', '\$')
                  output += f"""PASSWORD="{password}"
                  CLIENT_SECRET="{extra_params.get('client_secret', '')}"
                  """
                elif auth_type == 'jwt':
                  output += f"""PRIVATE_KEY="{extra_params.get('private_key', '')}"
                  """

              if state == ExecutionState.API_POST:
                stop = True
      outputs:
        artifacts:
          - name: success
            path: "/tmp/rest/success"
            s3:
              key: "{{inputs.parameters.output-prefix}}/success"
            archive:
              none: { }
          - name: failure
            path: "/tmp/rest/failure"
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.output-prefix}}/failure"
        parameters:
          - name: success-num-files
            valueFrom:
              path: "/tmp/rest/success/result-gen.txt"
          - name: failure-num-files
            valueFrom:
              path: "/tmp/rest/failure/result-gen.txt"
      container:
        image: ghcr.io/atlanhq/rest-master:165b7e5
        command: [ "./entrypoint.sh" ]
        volumeMounts:
          - name: atlan-NAME-workflow-directory
            mountPath: /tmp
          - name: credentials
            mountPath: /tmp/credentials
        imagePullPolicy: IfNotPresent
        args: [
            "python3", "main.py", "GET", "{{inputs.parameters.url}}",
            "--raw-input-paginate", "{{inputs.parameters.raw-input-paginate}}",
            "--raw-input-file-pattern", "{{inputs.parameters.raw-input-file-pattern}}",
            "--raw-input-multiline", "{{inputs.parameters.raw-input-multiline}}",
            "--request-config", "{{inputs.parameters.request-config}}",
            "--execution-script", "{{inputs.parameters.execution-script}}",
            "--secrets-path", "/tmp/credentials/success/*.json",
            "--auth-type", "oauth2",
            "--auth-oauth2-type", "{{inputs.parameters.oauth2-type}}",
            "--auth-oauth2-resource-owner-password-client-id", "CLIENT_ID",
            "--auth-oauth2-resource-owner-password-secret", "CLIENT_SECRET",
            "--auth-oauth2-resource-owner-password-token-url", "TOKEN_URL",
            "--auth-oauth2-resource-owner-password-username", "USERNAME",
            "--auth-oauth2-resource-owner-password-password", "PASSWORD",
            "--auth-oauth2-jwt-bearer-client-id", "CLIENT_ID",
            "--auth-oauth2-jwt-bearer-private-key", "PRIVATE_KEY",
            "--auth-oauth2-jwt-bearer-token-url", "TOKEN_URL",
            "--auth-oauth2-jwt-bearer-username", "USERNAME",
            "--auth-oauth2-jwt-bearer-token-expiry", "{{=sprig.unixEpoch(sprig.dateModify('3m', sprig.now()))}}",
            "--output-chunk-size", "{{inputs.parameters.output-chunk-size}}",
            "--output-file-prefix", "/tmp/rest/",
            "--pagination-wait-time", "10",
            "--max-retries", "3",
            "--statsd-host", "{{inputs.parameters.statsd-host}}",
            "--statsd-port", "{{inputs.parameters.statsd-port}}",
            "--statsd-global-tags", "{{inputs.parameters.statsd-global-tags}}"
          ]
          
      initContainers:
        - name: fetch-credentials
          image: ghcr.io/atlanhq/rest-master:165b7e5
          command: [ "python3", "main.py" ]
          env:
            - name: OAUTHLIB_INSECURE_TRANSPORT
              value: "1"
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.client-id-env}}"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.client-secret-env}}"
            - name: TOKEN_URL
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.kube-secret-name}}"
                  key: "{{inputs.parameters.token-url-env}}"
          mirrorVolumeMounts: true
          args: [
              "GET",
              "{{inputs.parameters.heracles-uri}}/credentials/{{inputs.parameters.credential-guid}}/use",
              "--raw-input", "{}",
              "--raw-input-file-pattern", "",
              "--raw-input-file-sort", "",
              "--raw-input-multiline", "f",
              "--execution-script", "{{inputs.parameters.init-execution-script}}",
              "--raw-input-paginate", "0",
              "--auth-type", "oauth2",
              "--auth-oauth2-type", "client_credentials",
              "--auth-oauth2-impersonate-user", "{{=sprig.dig('labels', 'workflows', 'argoproj', 'io/creator', '', workflow)}}",
              "--auth-oauth2-client-credentials-client-id", "CLIENT_ID",
              "--auth-oauth2-client-credentials-secret", "CLIENT_SECRET",
              "--auth-oauth2-client-credentials-token-url", "TOKEN_URL",
              "--output-chunk-size", "0",
              "--output-file-prefix", "/tmp/credentials",
              "--pagination-wait-time", "0",
              "--max-retries",
              "10",
              "--statsd-host", "{{inputs.parameters.statsd-host}}",
              "--statsd-port", "{{inputs.parameters.statsd-port}}",
              "--statsd-global-tags", "{{inputs.parameters.statsd-global-tags}}"
          ]

